// ------------
// Blink an LED
// ------------
#include <sstream>
#include <string.h>
using namespace std;


// First, we're going to make some variables.
// This is our "shorthand" that we'll use throughout the program:

int led1 = A5; 
// You'll need to wire an LED to this one to see it blink.

int led2 = D7; 


int photoresistor = A0;
int analogValue;



void setup() {

  // We are going to tell our device that D0 and D7 (which we named led1 and led2 respectively) are going to be output
  // (That means that we will be sending voltage to them, rather than monitoring voltage that comes from them)

  // It's important you do this here, inside the setup() function rather than outside it or in the loop function.

          

  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(photoresistor, INPUT);
  Particle.subscribe("hook-response/LightLevel", myHandler, MY_DEVICES);

}

void myHandler(const char *event, const char *data) {
  // Handle the integration response
}
          



// Next we have the loop function, the other essential part of a microcontroller program.
// This routine gets repeated over and over, as quickly as possible and as many times as possible, after the setup function is called.
// Note: Code that blocks for too long (like more than 5 seconds), can make weird things happen (like dropping the network connection).  The built-in delay function shown below safely interleaves required background activity, so arbitrarily long delays can safely be done if you need them.

void loop() {

analogValue = analogRead(photoresistor);

/*
if ( analogValue > 15){
    digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
}else{
    digitalWrite(led1, HIGH);
    digitalWrite(led2, HIGH);
}
  */
  
 // Get some data
 String data = String(analogValue);
  // Trigger the integration
  Particle.publish("LightLevel", data, PRIVATE);
  // Wait 60 seconds
  delay(30000);




  // And repeat!
